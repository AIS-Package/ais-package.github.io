"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[1144],{4690:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"advanced-guides/Utils/Sanitizers","title":"Sanitizers","description":"def sanitize_choice(...)","source":"@site/versioned_docs/version-0.3.x/advanced-guides/Utils/Sanitizers.md","sourceDirName":"advanced-guides/Utils","slug":"/advanced-guides/Utils/Sanitizers","permalink":"/docs/advanced-guides/Utils/Sanitizers","draft":false,"unlisted":false,"tags":[],"version":"0.3.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1747440000000,"frontMatter":{"last_update":{"date":"2025/05/17","author":"Jo\xe3o Paulo"}},"sidebar":"docs","previous":{"title":"Distance","permalink":"/docs/advanced-guides/Utils/Distance"},"next":{"title":"Validation","permalink":"/docs/advanced-guides/Utils/Validation"}}');var t=n(4848),d=n(8453);const a={last_update:{date:"2025/05/17",author:"Jo\xe3o Paulo"}},l="Sanitizers",r={},c=[{value:"def sanitize_choice(...)",id:"def-sanitize_choice",level:2},{value:"def sanitize_param(...)",id:"def-sanitize_param",level:2},{value:"def sanitize_seed(...)",id:"def-sanitize_seed",level:2}];function o(e){const i={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"sanitizers",children:"Sanitizers"})}),"\n",(0,t.jsx)(i.h2,{id:"def-sanitize_choice",children:"def sanitize_choice(...)"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"def sanitize_choice(value: T, valid_choices: Iterable[T], default: T) -> T\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The function ",(0,t.jsx)(i.code,{children:"sanitize_choice(...)"}),", returns the value if it is present in the set of valid choices; otherwise, returns the default value."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:(0,t.jsx)(i.strong,{children:"value"})})," (",(0,t.jsx)(i.code,{children:"T"}),"): The value to be checked."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:(0,t.jsx)(i.strong,{children:"valid_choices"})})," (",(0,t.jsx)(i.code,{children:"Iterable[T]"}),"): A collection of valid choices."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:(0,t.jsx)(i.strong,{children:"default"})}),":  The default value to be returned if ",(0,t.jsx)(i.code,{children:"value"})," is not in ",(0,t.jsx)(i.code,{children:"valid_choices"}),"."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"T"}),": The original value if valid, or the default value if not."]}),"\n"]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"def-sanitize_param",children:"def sanitize_param(...)"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"def sanitize_param(value: T, default: T, condition: Callable[[T], bool]) -> T:\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The function ",(0,t.jsx)(i.code,{children:"sanitize_param(...)"}),", returns the value if it satisfies the specified condition; otherwise, returns the default value."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["value (",(0,t.jsx)(i.code,{children:"T"}),"): The value to be checked."]}),"\n",(0,t.jsxs)(i.li,{children:["default (",(0,t.jsx)(i.code,{children:"T"}),"): The default value to be returned if the condition is not satisfied."]}),"\n",(0,t.jsxs)(i.li,{children:["condition (",(0,t.jsx)(i.code,{children:"Callable[[T], bool]"}),"): A function that takes a value and returns a boolean, determining if the value is valid."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"T"}),": The original value if the condition is satisfied, or the default value if not."]}),"\n"]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"def-sanitize_seed",children:"def sanitize_seed(...)"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"def sanitize_seed(seed: Any) -> Optional[int]:\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The function ",(0,t.jsx)(i.code,{children:"sanitize_param(...)"}),", returns the seed if it is a non-negative integer; otherwise, returns None."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["seed (",(0,t.jsx)(i.code,{children:"Any"}),"): The seed value to be validated."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"Optional[int]"}),": The original seed if it is a non-negative integer, or ",(0,t.jsx)(i.code,{children:"None"})," if it is invalid."]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>l});var s=n(6540);const t={},d=s.createContext(t);function a(e){const i=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(d.Provider,{value:i},e.children)}}}]);