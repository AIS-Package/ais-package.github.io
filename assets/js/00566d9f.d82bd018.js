"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[4613],{3478:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"advanced-guides/Base module/Mutation","title":"Mutation","description":"Contains functions that generate sets of mutated clones from continuous or binary vectors, simulating the clonal expansion process in artificial immune systems.","source":"@site/versioned_docs/version-0.2.x/advanced-guides/Base module/Mutation.md","sourceDirName":"advanced-guides/Base module","slug":"/advanced-guides/Base module/Mutation","permalink":"/docs/advanced-guides/Base module/Mutation","draft":false,"unlisted":false,"tags":[],"version":"0.2.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1750019576000,"frontMatter":{},"sidebar":"docs","previous":{"title":"BaseClassifier","permalink":"/docs/advanced-guides/Base module/Classifier"},"next":{"title":"Negative Selection","permalink":"/docs/advanced-guides/Base Classes Reference/nsa"}}');var a=t(4848),i=t(8453);const o={},r="Mutation",c={},l=[{value:"clone_and_mutate_continuous",id:"clone_and_mutate_continuous",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"clone_and_mutate_binary",id:"clone_and_mutate_binary",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"mutation",children:"Mutation"})}),"\n",(0,a.jsx)(n.p,{children:"Contains functions that generate sets of mutated clones from continuous or binary vectors, simulating the clonal expansion process in artificial immune systems."}),"\n",(0,a.jsx)(n.h2,{id:"clone_and_mutate_continuous",children:"clone_and_mutate_continuous"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"@njit([(types.float64[:], types.int64)], cache=True)\ndef clone_and_mutate_continuous(\n    vector: npt.NDArray[np.float64],\n    n: int\n) -> npt.NDArray[np.float64]:\n"})}),"\n",(0,a.jsx)(n.p,{children:"Generates a set of mutated clones from a continuous vector."}),"\n",(0,a.jsxs)(n.p,{children:["This function creates ",(0,a.jsx)(n.code,{children:"n"})," clones of the input vector and applies random mutations to each one, simulating the clonal expansion process in artificial immune systems. Each clone receives a random number of mutations at distinct positions of the original vector."]}),"\n",(0,a.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"vector"})," (",(0,a.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): The original immune cell with continuous values to be cloned and mutated."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"n"})," (",(0,a.jsx)(n.code,{children:"int"}),"): Number of mutated clones to be generated."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"clone_set"})," (",(0,a.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Array with shape ",(0,a.jsx)(n.code,{children:"(n, len(vector))"})," containing the ",(0,a.jsx)(n.code,{children:"n"})," mutated clones of the original vector."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"clone_and_mutate_binary",children:"clone_and_mutate_binary"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"@njit([(types.boolean[:], types.int64)], cache=True)\ndef clone_and_mutate_binary(\n    vector: npt.NDArray[np.bool_],\n    n: int\n) -> npt.NDArray[np.bool_]:\n"})}),"\n",(0,a.jsx)(n.p,{children:"Generates a set of mutated clones from a binary vector."}),"\n",(0,a.jsxs)(n.p,{children:["This function creates ",(0,a.jsx)(n.code,{children:"n"})," clones of the input binary vector and applies random mutations to some bits, simulating clonal expansion in artificial immune systems with discrete representations."]}),"\n",(0,a.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"vector"})," (",(0,a.jsx)(n.code,{children:"npt.NDArray[np.bool_]"}),"): The original immune cell with binary values to be cloned and mutated."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"n"})," (",(0,a.jsx)(n.code,{children:"int"}),"): Number of mutated clones to be generated."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"returns-1",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"clone_set"})," (",(0,a.jsx)(n.code,{children:"npt.NDArray[np.bool_]"}),"): Array with shape ",(0,a.jsx)(n.code,{children:"(n, len(vector))"})," containing the ",(0,a.jsx)(n.code,{children:"n"})," mutated clones of the original vector."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);