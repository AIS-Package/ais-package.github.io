"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[1812],{490:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/ainet_circler-89f7ab71b02fb04973b20b8797187800.png"},4511:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/ainet_blob-a06280f24a85d8e8924472ccfa8b8b2a.png"},7957:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/ainet_moon-e1991c13ed97cb796bc7f69d6266fe21.png"},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var i=n(6540);const s={},a=i.createContext(s);function l(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(a.Provider,{value:t},e.children)}},8580:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"getting-started/basic-use/AiNet","title":"Using the AiNet","description":"Access the Jupyter notebook with the code available here!","source":"@site/versioned_docs/version-0.4.x/getting-started/basic-use/AiNet.mdx","sourceDirName":"getting-started/basic-use","slug":"/getting-started/basic-use/AiNet","permalink":"/docs/getting-started/basic-use/AiNet","draft":false,"unlisted":false,"tags":[],"version":"0.4.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1754092800000,"frontMatter":{"title":"Using the AiNet","sidebar_label":"Using the AiNet","lastUpdatedAt":"2025/08/02","author":"Jo\xe3o Paulo","showLastUpdateAuthor":true,"showLastUpdateTime":true,"last_update":{"date":"2025/08/02","author":"Jo\xe3o Paulo"},"keywords":["Artificial Immune Network","AiNet","immune-inspired algorithms","clustering","machine learning","anomaly detection","make_blobs","make_moons","make_circles","data visualization","networkx"]},"sidebar":"docs","previous":{"title":"Using the AIRS","permalink":"/docs/getting-started/basic-use/AIRS"},"next":{"title":"Using the BNSA","permalink":"/docs/getting-started/basic-use/BNSA"}}');var s=n(4848),a=n(8453);const l={title:"Using the AiNet",sidebar_label:"Using the AiNet",lastUpdatedAt:"2025/08/02",author:"Jo\xe3o Paulo",showLastUpdateAuthor:!0,showLastUpdateTime:!0,last_update:{date:"2025/08/02",author:"Jo\xe3o Paulo"},keywords:["Artificial Immune Network","AiNet","immune-inspired algorithms","clustering","machine learning","anomaly detection","make_blobs","make_moons","make_circles","data visualization","networkx"]},r="Using the AiNet",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Importing the Artificial Immune Network",id:"importing-the-artificial-immune-network",level:2},{value:"Visualization Function",id:"visualization-function",level:2},{value:"Demonstration 1 - Blobs Dataset",id:"demonstration-1---blobs-dataset",level:2},{value:"Generating data",id:"generating-data",level:3},{value:"Training AiNet",id:"training-ainet",level:3},{value:"Silhouette score",id:"silhouette-score",level:3},{value:"Visualization",id:"visualization",level:3},{value:"Demonstration 2 - Moons Dataset",id:"demonstration-2---moons-dataset",level:2},{value:"Generating data",id:"generating-data-1",level:3},{value:"Training AiNet",id:"training-ainet-1",level:3},{value:"Silhouette score",id:"silhouette-score-1",level:3},{value:"Visualization",id:"visualization-1",level:3},{value:"Demonstration 3 - Circles Dataset",id:"demonstration-3---circles-dataset",level:2},{value:"Generating data",id:"generating-data-2",level:3},{value:"Training AiNet",id:"training-ainet-2",level:3},{value:"Silhouette score",id:"silhouette-score-2",level:3},{value:"Visualization",id:"visualization-2",level:3}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:i}=t;return i||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"using-the-ainet",children:"Using the AiNet"})}),"\n",(0,s.jsxs)(t.p,{children:["Access the Jupyter notebook with the code available ",(0,s.jsx)(t.a,{href:"https://github.com/AIS-Package/aisp/blob/main/examples/en/clustering/AiNet/example_with_randomly_generated_dataset.ipynb",children:"here"}),"!"]}),"\n",(0,s.jsxs)(t.p,{children:["Run notebook online via Binder: ",(0,s.jsx)(t.a,{href:"https://mybinder.org/v2/gh/AIS-Package/aisp/HEAD?labpath=%2Fexamples%2Fen%2Fclustering%2FAiNet%2Fexample_with_randomly_generated_dataset.ipynb",children:(0,s.jsx)(t.img,{src:"https://mybinder.org/badge_logo.svg",alt:"Binder"})})]}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"Clustering is an unsupervised machine learning task that groups data into clusters."}),"\n",(0,s.jsxs)(t.p,{children:["In this notebook, we explore ",(0,s.jsx)(t.strong,{children:"AiNet (Artificial Immune Network)"}),". AiNet uses concepts such as antibody affinity and clone suppression to identify cluster centers."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Objective:"})," Demonstrate AiNet on random datasets:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Blobs:"})," Well-defined spherical clusters."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Moons:"})," Non-linear clusters."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Circles:"})," Two concentric circles, showing non-linear separation."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Notebook Structure:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Setup: Install and import libraries."}),"\n",(0,s.jsx)(t.li,{children:"Visualization Function: Plot AiNet results."}),"\n",(0,s.jsx)(t.li,{children:"Demonstration 1 - Blobs"}),"\n",(0,s.jsx)(t.li,{children:"Demonstration 2 - Moons"}),"\n",(0,s.jsx)(t.li,{children:"Demonstration 3 - Circles"}),"\n"]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"importing-the-artificial-immune-network",children:"Importing the Artificial Immune Network"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from aisp.ina import AiNet\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"visualization-function",children:"Visualization Function"}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"AiNet Visualization Function (plots clusters and immune network)"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def plot_immune_network(train_x, predict_y, model, title_prefix=\"\"):\n    \"\"\"\n    Plots the clustering results of AiNet.\n\n    Parameters:\n        train_x (np.array): Input data.\n        predict_y (np.array): Cluster predictions from the model.\n        model (AiNet): The trained AiNet model.\n        title_prefix (str, optional): A prefix for the plot titles.\n    \"\"\"\n    clusters = list(model._memory_network.values())\n    network = np.array(model._population_antibodies)\n    \n    fig, axs = plt.subplots(2, 2, figsize=(15, 15))\n    colors = colormaps.get_cmap('Accent')\n\n    # Original data\n    axs[0][0].scatter(train_x[:, 0], train_x[:, 1], color='dodgerblue', alpha=0.9, s=50, marker='o', edgecolors='k')\n    axs[0][0].set_title(f'{title_prefix}Original Data', fontsize=16)\n    axs[0][0].set_xlabel('X', fontsize=14)\n    axs[0][0].set_ylabel('Y', fontsize=14)\n    axs[0][0].grid(True, linestyle='--', alpha=0.5)\n\n    # Antibody population\n    axs[0][1].scatter(network[:, 0], network[:, 1], color='crimson', alpha=0.9, s=70, marker='.', edgecolors='k')\n    axs[0][1].set_title(f'{title_prefix}Antibody Population', fontsize=16)\n    axs[0][1].set_xlabel('X', fontsize=14)\n    axs[0][1].set_ylabel('Y', fontsize=14)\n    axs[0][1].grid(True, linestyle='--', alpha=0.5)\n\n    # Cluster predictions\n    scatter = axs[1][0].scatter(train_x[:, 0], train_x[:, 1], c=predict_y, cmap='Accent', s=50, edgecolors='k', alpha=0.9)\n    axs[1][0].set_title(f'{title_prefix}Cluster Predictions (AiNet)', fontsize=16)\n    axs[1][0].set_xlabel('X', fontsize=14)\n    axs[1][0].set_ylabel('Y', fontsize=14)\n    axs[1][0].grid(True, linestyle='--', alpha=0.5)\n    legend1 = axs[1][0].legend(*scatter.legend_elements(), title=\"Clusters\")\n    axs[1][0].add_artist(legend1)\n\n    # Immune Network Graph\n    G = nx.Graph()\n    positions = {}\n    for i, cluster in enumerate(clusters):\n        cluster_nodes = [f'{i}_{j}' for j in range(len(cluster))]\n        G.add_nodes_from(cluster_nodes)\n        for node, point in zip(cluster_nodes, cluster):\n            positions[node] = tuple(point)\n        dist_matrix = squareform(pdist(cluster))\n        mst_local = minimum_spanning_tree(dist_matrix).toarray()\n        for row_idx, row in enumerate(mst_local):\n            for col_idx, weight in enumerate(row):\n                if weight > 0:\n                    G.add_edge(cluster_nodes[row_idx], cluster_nodes[col_idx], weight=weight)\n    for i, cluster in enumerate(clusters):\n        cluster_nodes = [f'{i}_{j}' for j in range(len(cluster))]\n        nx.draw_networkx_nodes(G, positions, nodelist=cluster_nodes, ax=axs[1][1],\n                               node_color=[colors(i)], node_size=70, edgecolors='k', label=f'Cluster {i}')\n    nx.draw_networkx_edges(G, positions, ax=axs[1][1], alpha=0.6)\n    axs[1][1].set_title(f'{title_prefix}Graph Immune Network', fontsize=16)\n    axs[1][1].set_xlabel('X', fontsize=14)\n    axs[1][1].set_ylabel('Y', fontsize=14)\n    axs[1][1].grid(True, linestyle='--', alpha=0.5)\n    axs[1][1].legend()\n    plt.tight_layout()\n    plt.show()\n"})})]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"demonstration-1---blobs-dataset",children:"Demonstration 1 - Blobs Dataset"}),"\n",(0,s.jsx)(t.h3,{id:"generating-data",children:"Generating data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"samples, output = make_blobs(\n    n_samples=1000,\n    cluster_std=0.07,\n    center_box=(0.0, 1.0),\n    centers=[[0.25, 0.75], [0.75, 0.25]],\n    random_state=1234,\n)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"training-ainet",children:"Training AiNet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"model = AiNet(suppression_threshold=0.96, affinity_threshold=0.95, mst_inconsistency_factor=3, seed=123)\npredict_y = model.fit_predict(samples)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Output:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"\u2714 Set of memory antibodies for classes (0, 1) successfully generated | Clusters: 2 | Population of antibodies size: 104:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 10/10 total training interactions\n"})}),"\n",(0,s.jsx)(t.h3,{id:"silhouette-score",children:"Silhouette score"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'silhouette = silhouette_score(samples, predict_y)\nprint(f"Silhouette Coefficient: {silhouette:.3f}")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Output:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"Silhouette Coefficient: 0.826\n"})}),"\n",(0,s.jsx)(t.h3,{id:"visualization",children:"Visualization"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'plot_immune_network(samples, predict_y, model, title_prefix="Blobs - ")\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Blobs",src:n(4511).A+"",width:"1488",height:"1489"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"demonstration-2---moons-dataset",children:"Demonstration 2 - Moons Dataset"}),"\n",(0,s.jsx)(t.h3,{id:"generating-data-1",children:"Generating data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"samples, output = make_moons(n_samples=1000, noise=0.05, random_state=42)\nsamples = MinMaxScaler().fit_transform(samples)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"training-ainet-1",children:"Training AiNet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"model = AiNet(suppression_threshold=0.95, affinity_threshold=0.97, mst_inconsistency_factor=2.5, seed=123)\npredict_y = model.fit_predict(samples)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Output:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"\u2714 Set of memory antibodies for classes (0, 1) successfully generated | Clusters: 2 | Population of antibodies size: 69:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 10/10 total training interactions\n"})}),"\n",(0,s.jsx)(t.h3,{id:"silhouette-score-1",children:"Silhouette score"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'silhouette = silhouette_score(samples, predict_y)\nprint(f"Silhouette Coefficient: {silhouette:.3f}")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Output:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"Silhouette Coefficient: 0.398\n"})}),"\n",(0,s.jsx)(t.h3,{id:"visualization-1",children:"Visualization"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'plot_immune_network(samples, predict_y, model, title_prefix="Moons - ")\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Moons",src:n(7957).A+"",width:"1489",height:"1489"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"demonstration-3---circles-dataset",children:"Demonstration 3 - Circles Dataset"}),"\n",(0,s.jsx)(t.h3,{id:"generating-data-2",children:"Generating data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"samples, output = make_circles(n_samples=1000, noise=0.05, factor=0.5, random_state=42)\nsamples = MinMaxScaler().fit_transform(samples)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"training-ainet-2",children:"Training AiNet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"model = AiNet(suppression_threshold=0.97, affinity_threshold=0.98, mst_inconsistency_factor=3.8, seed=123)\npredict_y = model.fit_predict(samples)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Output:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"\u2714 Set of memory antibodies for classes (0, 1) successfully generated | Clusters: 2 | Population of antibodies size: 169:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 10/10 total training interactions\n"})}),"\n",(0,s.jsx)(t.h3,{id:"silhouette-score-2",children:"Silhouette score"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'silhouette = silhouette_score(samples, predict_y)\nprint(f"Silhouette Coefficient: {silhouette:.3f}")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Output:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"Silhouette Coefficient: 0.112\n"})}),"\n",(0,s.jsx)(t.h3,{id:"visualization-2",children:"Visualization"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'plot_immune_network(samples, predict_y, model, title_prefix="Circles - ")\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(490).A+"",width:"1489",height:"1489"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);