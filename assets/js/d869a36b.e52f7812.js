"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[7636],{208:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"advanced-guides/base-module/Mutation","title":"Mutation","description":"Contains functions that generate sets of mutated clones from continuous or binary vectors, simulating the clonal expansion process in artificial immune systems.","source":"@site/versioned_docs/version-0.3.x/advanced-guides/base-module/Mutation.md","sourceDirName":"advanced-guides/base-module","slug":"/advanced-guides/base-module/Mutation","permalink":"/docs/0.3.x/advanced-guides/base-module/Mutation","draft":false,"unlisted":false,"tags":[],"version":"0.3.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1758597438000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Mutation","sidebar_label":"Mutation","lastUpdatedAt":"2025/04/04","author":"Jo\xe3o Paulo","keywords":["Mutation","Clonal Expansion","Immune System","clone_and_mutate","clone_and_mutate_continuous","clone_and_mutate_binary","clone_and_mutate_ranged","Artificial Immune Systems","Python Numba Functions","Vector Mutation"]},"sidebar":"docs","previous":{"title":"BaseClusterer","permalink":"/docs/0.3.x/advanced-guides/base-module/Clusterer"},"next":{"title":"Negative Selection","permalink":"/docs/0.3.x/advanced-guides/base-classes-reference/nsa"}}');var o=t(4848),i=t(8453);const s={sidebar_position:4,title:"Mutation",sidebar_label:"Mutation",lastUpdatedAt:"2025/04/04",author:"Jo\xe3o Paulo",keywords:["Mutation","Clonal Expansion","Immune System","clone_and_mutate","clone_and_mutate_continuous","clone_and_mutate_binary","clone_and_mutate_ranged","Artificial Immune Systems","Python Numba Functions","Vector Mutation"]},r="Mutation",c={},l=[{value:"clone_and_mutate_continuous",id:"clone_and_mutate_continuous",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"clone_and_mutate_binary",id:"clone_and_mutate_binary",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"clone_and_mutate_ranged",id:"clone_and_mutate_ranged",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mutation",children:"Mutation"})}),"\n",(0,o.jsx)(n.p,{children:"Contains functions that generate sets of mutated clones from continuous or binary vectors, simulating the clonal expansion process in artificial immune systems."}),"\n",(0,o.jsx)(n.h2,{id:"clone_and_mutate_continuous",children:"clone_and_mutate_continuous"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"@njit([(types.float64[:], types.int64)], cache=True)\ndef clone_and_mutate_continuous(\n    vector: npt.NDArray[np.float64],\n    n: int\n) -> npt.NDArray[np.float64]:\n"})}),"\n",(0,o.jsx)(n.p,{children:"Generates a set of mutated clones from a continuous vector."}),"\n",(0,o.jsxs)(n.p,{children:["This function creates ",(0,o.jsx)(n.code,{children:"n"})," clones of the input vector and applies random mutations to each one, simulating the clonal expansion process in artificial immune systems. Each clone receives a random number of mutations at distinct positions of the original vector."]}),"\n",(0,o.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"vector"})," (",(0,o.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): The original immune cell with continuous values to be cloned and mutated."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"n"})," (",(0,o.jsx)(n.code,{children:"int"}),"): Number of mutated clones to be generated."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"clone_set"})," (",(0,o.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Array with shape ",(0,o.jsx)(n.code,{children:"(n, len(vector))"})," containing the ",(0,o.jsx)(n.code,{children:"n"})," mutated clones of the original vector."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"clone_and_mutate_binary",children:"clone_and_mutate_binary"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"@njit([(types.boolean[:], types.int64)], cache=True)\ndef clone_and_mutate_binary(\n    vector: npt.NDArray[np.bool_],\n    n: int\n) -> npt.NDArray[np.bool_]:\n"})}),"\n",(0,o.jsx)(n.p,{children:"Generates a set of mutated clones from a binary vector."}),"\n",(0,o.jsxs)(n.p,{children:["This function creates ",(0,o.jsx)(n.code,{children:"n"})," clones of the input binary vector and applies random mutations to some bits, simulating clonal expansion in artificial immune systems with discrete representations."]}),"\n",(0,o.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"vector"})," (",(0,o.jsx)(n.code,{children:"npt.NDArray[np.bool_]"}),"): The original immune cell with binary values to be cloned and mutated."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"n"})," (",(0,o.jsx)(n.code,{children:"int"}),"): Number of mutated clones to be generated."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"returns-1",children:"Returns"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"clone_set"})," (",(0,o.jsx)(n.code,{children:"npt.NDArray[np.bool_]"}),"): Array with shape ",(0,o.jsx)(n.code,{children:"(n, len(vector))"})," containing the ",(0,o.jsx)(n.code,{children:"n"})," mutated clones of the original vector."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"clone_and_mutate_ranged",children:"clone_and_mutate_ranged"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"@njit([(types.float64[:], types.int64, types.float64[:, :])], cache=True)\ndef clone_and_mutate_ranged(\n    vector: npt.NDArray[np.float64],\n    n: int,\n    bounds: npt.NDArray[np.float64]\n) -> npt.NDArray[np.float64]:\n"})}),"\n",(0,o.jsx)(n.p,{children:"Generates a set of mutated clones from a continuous vector using custom bounds per dimension."}),"\n",(0,o.jsxs)(n.p,{children:["This function creates ",(0,o.jsx)(n.code,{children:"n"})," clones of the input vector and applies random mutations to each of them, simulating the process of clonal expansion in artificial immune systems. Each clone will have a random number of mutations applied to distinct positions of the original vector, respecting the mutation bounds defined per dimension."]}),"\n",(0,o.jsx)(n.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"vector"})," (",(0,o.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): The original immune cell with continuous values to be cloned and mutated."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"n"})," (",(0,o.jsx)(n.code,{children:"int"}),"): Number of mutated clones to be generated."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bounds"})," (",(0,o.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): A 2D array with shape ",(0,o.jsx)(n.code,{children:"(len(vector), 2)"})," containing the minimum and maximum values for each dimension."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"returns-2",children:"Returns"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"clone_set"})," (",(0,o.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Array with shape ",(0,o.jsx)(n.code,{children:"(n, len(vector))"})," containing the ",(0,o.jsx)(n.code,{children:"n"})," mutated clones of the original vector."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(6540);const o={},i=a.createContext(o);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);