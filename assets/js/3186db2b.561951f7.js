"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[6363],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},9421:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"advanced-guides/base-module/Mutation","title":"Mutation","description":"Contains functions that generate sets of mutated clones from continuous or binary vectors, simulating the clonal expansion process in artificial immune systems.","source":"@site/versioned_docs/version-0.4.x/advanced-guides/base-module/Mutation.md","sourceDirName":"advanced-guides/base-module","slug":"/advanced-guides/base-module/Mutation","permalink":"/docs/advanced-guides/base-module/Mutation","draft":false,"unlisted":false,"tags":[],"version":"0.4.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1758596852000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Mutation","sidebar_label":"Mutation","lastUpdatedAt":"2025/04/04","author":"Jo\xe3o Paulo","keywords":["Mutation","Clonal Expansion","Immune System","clone_and_mutate","clone_and_mutate_continuous","clone_and_mutate_binary","clone_and_mutate_ranged","Artificial Immune Systems","Python Numba Functions","Vector Mutation"]},"sidebar":"docs","previous":{"title":"BaseOptimizer","permalink":"/docs/advanced-guides/base-module/Optimizer"},"next":{"title":"Negative Selection","permalink":"/docs/advanced-guides/base-classes-reference/nsa"}}');var s=t(4848),i=t(8453);const r={sidebar_position:5,title:"Mutation",sidebar_label:"Mutation",lastUpdatedAt:"2025/04/04",author:"Jo\xe3o Paulo",keywords:["Mutation","Clonal Expansion","Immune System","clone_and_mutate","clone_and_mutate_continuous","clone_and_mutate_binary","clone_and_mutate_ranged","Artificial Immune Systems","Python Numba Functions","Vector Mutation"]},o="Mutation",l={},c=[{value:"clone_and_mutate_continuous",id:"clone_and_mutate_continuous",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"clone_and_mutate_binary",id:"clone_and_mutate_binary",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"clone_and_mutate_ranged",id:"clone_and_mutate_ranged",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"clone_and_mutate_permutation",id:"clone_and_mutate_permutation",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"Returns",id:"returns-3",level:3}];function d(e){const n={annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mutation",children:"Mutation"})}),"\n",(0,s.jsx)(n.p,{children:"Contains functions that generate sets of mutated clones from continuous or binary vectors, simulating the clonal expansion process in artificial immune systems."}),"\n",(0,s.jsx)(n.h2,{id:"clone_and_mutate_continuous",children:"clone_and_mutate_continuous"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@njit([(types.float64[:], types.int64)], cache=True)\ndef clone_and_mutate_continuous(\n    vector: npt.NDArray[np.float64],\n    n: int\n) -> npt.NDArray[np.float64]:\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generates a set of mutated clones from a continuous vector."}),"\n",(0,s.jsxs)(n.p,{children:["This function creates ",(0,s.jsx)(n.code,{children:"n"})," clones of the input vector and applies random mutations to each one, simulating the clonal expansion process in artificial immune systems. Each clone receives a random number of mutations at distinct positions of the original vector."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vector"})," (",(0,s.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): The original immune cell with continuous values to be cloned and mutated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n"})," (",(0,s.jsx)(n.code,{children:"int"}),"): Number of mutated clones to be generated."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"clone_set"})," (",(0,s.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Array with shape ",(0,s.jsx)(n.code,{children:"(n, len(vector))"})," containing the ",(0,s.jsx)(n.code,{children:"n"})," mutated clones of the original vector."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"clone_and_mutate_binary",children:"clone_and_mutate_binary"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@njit([(types.boolean[:], types.int64)], cache=True)\ndef clone_and_mutate_binary(\n    vector: npt.NDArray[np.bool_],\n    n: int\n) -> npt.NDArray[np.bool_]:\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generates a set of mutated clones from a binary vector."}),"\n",(0,s.jsxs)(n.p,{children:["This function creates ",(0,s.jsx)(n.code,{children:"n"})," clones of the input binary vector and applies random mutations to some bits, simulating clonal expansion in artificial immune systems with discrete representations."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vector"})," (",(0,s.jsx)(n.code,{children:"npt.NDArray[np.bool_]"}),"): The original immune cell with binary values to be cloned and mutated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n"})," (",(0,s.jsx)(n.code,{children:"int"}),"): Number of mutated clones to be generated."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"clone_set"})," (",(0,s.jsx)(n.code,{children:"npt.NDArray[np.bool_]"}),"): Array with shape ",(0,s.jsx)(n.code,{children:"(n, len(vector))"})," containing the ",(0,s.jsx)(n.code,{children:"n"})," mutated clones of the original vector."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"clone_and_mutate_ranged",children:"clone_and_mutate_ranged"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@njit([(types.float64[:], types.int64, types.float64[:, :])], cache=True)\ndef clone_and_mutate_ranged(\n    vector: npt.NDArray[np.float64],\n    n: int,\n    bounds: npt.NDArray[np.float64]\n) -> npt.NDArray[np.float64]:\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generates a set of mutated clones from a continuous vector using custom bounds per dimension."}),"\n",(0,s.jsxs)(n.p,{children:["This function creates ",(0,s.jsx)(n.code,{children:"n"})," clones of the input vector and applies random mutations to each of them, simulating the process of clonal expansion in artificial immune systems. Each clone will have a random number of mutations applied to distinct positions of the original vector, respecting the mutation bounds defined per dimension."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vector"})," (",(0,s.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): The original immune cell with continuous values to be cloned and mutated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n"})," (",(0,s.jsx)(n.code,{children:"int"}),"): Number of mutated clones to be generated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bounds"})," (",(0,s.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): A 2D array with shape ",(0,s.jsx)(n.code,{children:"(len(vector), 2)"})," containing the minimum and maximum values for each dimension."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"clone_set"})," (",(0,s.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Array with shape ",(0,s.jsx)(n.code,{children:"(n, len(vector))"})," containing the ",(0,s.jsx)(n.code,{children:"n"})," mutated clones of the original vector."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"clone_and_mutate_permutation",children:"clone_and_mutate_permutation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@njit([(types.int64[:], types.int64, types.float64)], cache=True)\ndef clone___and_mutate_permutation(\n    vector: npt.NDArray[np.int64],\n    n: int,\n    mutation_rate: float\n) -> npt.NDArray[np.int64]:\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generates a set of mutated clones from a permutation vector."}),"\n",(0,s.jsxs)(n.p,{children:["This function creates ",(0,s.jsx)(n.code,{children:"n"})," clones of the input permutation vector and applies random mutations to each one, simulating clonal expansion in artificial immune systems with discrete permutations. Each clone receives a random number of swaps according to the mutation rate."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vector"})," (",(0,s.jsx)(n.code,{children:"npt.NDArray[np.int64]"}),"): The original immune cell with permutation values to be cloned and mutated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n"})," (",(0,s.jsx)(n.code,{children:"int"}),"): Number of mutated clones to be generated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mutation_rate"})," (",(0,s.jsx)(n.code,{children:"float"}),"): Probability of mutating each component (",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mn,{children:"0"}),(0,s.jsx)(n.mo,{children:"<"}),(0,s.jsx)(n.mo,{children:"="}),(0,s.jsx)(n.mi,{children:"m"}),(0,s.jsx)(n.mi,{children:"u"}),(0,s.jsx)(n.mi,{children:"t"}),(0,s.jsx)(n.mi,{children:"a"}),(0,s.jsx)(n.mi,{children:"t"}),(0,s.jsx)(n.mi,{children:"i"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mi,{mathvariant:"normal",children:"_"}),(0,s.jsx)(n.mi,{children:"r"}),(0,s.jsx)(n.mi,{children:"a"}),(0,s.jsx)(n.mi,{children:"t"}),(0,s.jsx)(n.mi,{children:"e"}),(0,s.jsx)(n.mo,{children:"<"}),(0,s.jsx)(n.mn,{children:"1"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"0 <= mutation\\_rate < 1"})]})})}),(0,s.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6835em",verticalAlign:"-0.0391em"}}),(0,s.jsx)(n.span,{className:"mord",children:"0"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.jsx)(n.span,{className:"mrel",children:"<="}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.9695em",verticalAlign:"-0.31em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"i"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mord",style:{marginRight:"0.02778em"},children:"_"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"r"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.jsx)(n.span,{className:"mrel",children:"<"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,s.jsx)(n.span,{className:"mord",children:"1"})]})]})]}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"clone_set"})," (",(0,s.jsx)(n.code,{children:"npt.NDArray[np.int64]"}),"): Array with shape ",(0,s.jsx)(n.code,{children:"(n, len(vector))"})," containing the ",(0,s.jsx)(n.code,{children:"n"})," mutated clones of the original vector."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);