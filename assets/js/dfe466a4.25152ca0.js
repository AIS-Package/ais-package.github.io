"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[9293],{266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Getting Started/basic use/RNSA","title":"Using the RNSA","description":"Access the Jupyter notebook with the code available here!","source":"@site/versioned_docs/version-0.2.x/Getting Started/basic use/RNSA.md","sourceDirName":"Getting Started/basic use","slug":"/Getting Started/basic use/RNSA","permalink":"/docs/Getting Started/basic use/RNSA","draft":false,"unlisted":false,"tags":[],"version":"0.2.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1747440000000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Using the RNSA","sidebar_label":"Using the RNSA","lastUpdatedAt":"2025/05/17","author":"Jo\xe3o Paulo","showLastUpdateAuthor":true,"showLastUpdateTime":true,"last_update":{"date":"2025/05/17","author":"Jo\xe3o Paulo"},"keywords":["Real-Valued","classifying","anomalies","not self","V-detector","Negative Selection Algorithm","Artificial Immune System (AIS)","Self and non-self","Immune","Computa\xe7\xe3o Natural"]},"sidebar":"docs","previous":{"title":"Using the BNSA","permalink":"/docs/Getting Started/basic use/BNSA"},"next":{"title":"Using the AIRS","permalink":"/docs/Getting Started/basic use/AIRS"}}');var a=n(4848),i=n(8453);const r={sidebar_position:2,title:"Using the RNSA",sidebar_label:"Using the RNSA",lastUpdatedAt:"2025/05/17",author:"Jo\xe3o Paulo",showLastUpdateAuthor:!0,showLastUpdateTime:!0,last_update:{date:"2025/05/17",author:"Jo\xe3o Paulo"},keywords:["Real-Valued","classifying","anomalies","not self","V-detector","Negative Selection Algorithm","Artificial Immune System (AIS)","Self and non-self","Immune","Computa\xe7\xe3o Natural"]},o="Using the RNSA",c={},l=[{value:"Importing the Real-Valued Negative Selection Algorithm.",id:"importing-the-real-valued-negative-selection-algorithm",level:3},{value:"Generating dice bubbles for classes randomly.",id:"generating-dice-bubbles-for-classes-randomly",level:3},{value:"Testing the model <code>default-NSA</code>:",id:"testing-the-model-default-nsa",level:3},{value:"Detector and sample plotting:",id:"detector-and-sample-plotting",level:3},{value:"Testing the model <code>V-detector</code>:",id:"testing-the-model-v-detector",level:3},{value:"Detector and sample plotting:",id:"detector-and-sample-plotting-1",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"using-the-rnsa",children:"Using the RNSA"})}),"\n",(0,a.jsxs)(t.p,{children:["Access the Jupyter notebook with the code available ",(0,a.jsx)(t.a,{href:"https://github.com/AIS-Package/aisp/blob/main/examples/en/classification/RNSA/example_with_randomly_generated_dataset-en.ipynb",children:"here"}),"!"]}),"\n",(0,a.jsx)(t.h3,{id:"importing-the-real-valued-negative-selection-algorithm",children:"Importing the Real-Valued Negative Selection Algorithm."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from aisp.nsa import RNSA\n"})}),"\n",(0,a.jsx)(t.h3,{id:"generating-dice-bubbles-for-classes-randomly",children:"Generating dice bubbles for classes randomly."}),"\n",(0,a.jsxs)(t.p,{children:["Using the ",(0,a.jsx)(t.code,{children:"make_blobs"})," function, two sets of data are generated in the form of bubbles, in the range between 0 and 1, representing each class x and y. Then this data is separated into test and training sets."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from sklearn.datasets import make_blobs\nfrom sklearn.model_selection import train_test_split\n\n# Generating the samples and outputs for the training.\nsamples, output = make_blobs(n_samples=500 , n_features=2, cluster_std=0.07, center_box=([0.0, 1.0]), centers=[[0.25, 0.75], [0.75, 0.25]], random_state=1234) \n# Separating data for training and testing.\ntrain_x, test_x, train_y, test_y = train_test_split(samples, output, test_size=0.2)\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.h3,{id:"testing-the-model-default-nsa",children:["Testing the model ",(0,a.jsx)(t.code,{children:"default-NSA"}),":"]}),"\n",(0,a.jsx)(t.p,{children:"Start the model with 500 detectors, each with a radius of 0.06. Then, it presents the result of the forecast accuracy."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n\n# Starting the class.\nmodel = RNSA(N=500, r=0.05, seed=1234)\n# Carrying out the training:\nmodel.fit(X=train_x, y=train_y)\n# Previewing classes with test samples.\nprev_y = model.predict(test_x)\n# Showing the accuracy of predictions for actual data.\nprint(f"The accuracy is {accuracy_score(prev_y, test_y)}")\nprint(classification_report(test_y, prev_y))\n'})}),"\n",(0,a.jsx)(t.p,{children:"Output:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"\u2714 Non-self detectors for classes (0, 1) successfully generated:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 1000/1000 detectors\nThe accuracy is 1.0\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        55\n           1       1.00      1.00      1.00        45\n\n    accuracy                           1.00       100\n   macro avg       1.00      1.00      1.00       100\nweighted avg       1.00      1.00      1.00       100\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"detector-and-sample-plotting",children:"Detector and sample plotting:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(7847).A+"",width:"1242",height:"572"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.h3,{id:"testing-the-model-v-detector",children:["Testing the model ",(0,a.jsx)(t.code,{children:"V-detector"}),":"]}),"\n",(0,a.jsx)(t.p,{children:"Start the model with 50 detectors, where the minimum radius is 0.05 and the sample's own radius is 0.04. It then shows the forecast accuracy result."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n\n# Starting the class.\nmodel = RNSA(N=20, r=0.02, algorithm='V-detector', r_s=0.04, seed=123)\n# Carrying out the training:\nmodel.fit(X=train_x, y=train_y)\n# Previewing classes with test samples.\nprev_y = model.predict(test_x)\n# Showing the accuracy of predictions for actual data.\nprint(f\"The accuracy is {accuracy_score(prev_y, test_y)}\")\nprint(classification_report(test_y, prev_y))\n"})}),"\n",(0,a.jsx)(t.p,{children:"Output:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"\u2714 Non-self detectors for classes (0, 1) successfully generated:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 40/40 detectors\nThe accuracy is 1.0\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        55\n           1       1.00      1.00      1.00        45\n\n    accuracy                           1.00       100\n   macro avg       1.00      1.00      1.00       100\nweighted avg       1.00      1.00      1.00       100\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"detector-and-sample-plotting-1",children:"Detector and sample plotting:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(4069).A+"",width:"1225",height:"593"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},4069:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/exemple_en_v-6aa6177affc6e1a660ba8e62cd87118b.png"},7847:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/exemple_en_d-44cd95d8dc6321aa646a678c0159130a.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);