"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[620],{7931:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"advanced-guides/base-module/Optimizer","title":"Base class for optimization algorithms.","description":"This class defines the core interface for optimization strategies and","source":"@site/versioned_docs/version-0.4.x/advanced-guides/base-module/Optimizer.md","sourceDirName":"advanced-guides/base-module","slug":"/advanced-guides/base-module/Optimizer","permalink":"/docs/advanced-guides/base-module/Optimizer","draft":false,"unlisted":false,"tags":[],"version":"0.4.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1759068822000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Base class for optimization algorithms.","sidebar_label":"BaseOptimizer","lastUpdatedAt":"2025/08/19","author":"Jo\xe3o Paulo","keywords":["BaseOptimizer","base class","optimization algorithms","abstract base class","machine learning optimization","supervised learning","optimize method","objective function","model evaluation","Python ML classes","Clonalg","metaheuristics"]},"sidebar":"docs","previous":{"title":"BaseClusterer","permalink":"/docs/advanced-guides/base-module/Clusterer"},"next":{"title":"Mutation","permalink":"/docs/advanced-guides/base-module/Mutation"}}');var i=s(4848),o=s(8453);const r={sidebar_position:4,title:"Base class for optimization algorithms.",sidebar_label:"BaseOptimizer",lastUpdatedAt:"2025/08/19",author:"Jo\xe3o Paulo",keywords:["BaseOptimizer","base class","optimization algorithms","abstract base class","machine learning optimization","supervised learning","optimize method","objective function","model evaluation","Python ML classes","Clonalg","metaheuristics"]},l=void 0,c={},a=[{value:"Properties",id:"Properties",level:3},{value:"<code>cost_history</code>",id:"cost_history",level:4},{value:"<code>solution_history</code>",id:"solution_history",level:4},{value:"<code>best_solution</code>",id:"best_solution",level:4},{value:"<code>best_cost</code>",id:"best_cost",level:4},{value:"Functions",id:"Functions",level:2},{value:"Function _record_best(...)",id:"Function-_record_best",level:3},{value:"Function get_report()",id:"Function-get_report",level:3},{value:"Function register(...)",id:"Function-register",level:3},{value:"Function reset()",id:"Function-reset",level:3},{value:"Abstract methods",id:"Abstract-methods",level:3},{value:"Function optimize(...)",id:"Function-optimize",level:4},{value:"Function affinity_function(...)",id:"Function-affinity_function",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This class defines the core interface for optimization strategies and\nkeeps track of the cost history, evaluated solutions, and the best solution found. Subclasses must implement\n",(0,i.jsx)(n.code,{children:"optimize"})," and ",(0,i.jsx)(n.code,{children:"objective_function"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"Properties",children:"Properties"}),"\n",(0,i.jsx)(n.h4,{id:"cost_history",children:(0,i.jsx)(n.code,{children:"cost_history"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"@property\ndef cost_history(self) -> List[float]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the history of costs during optimization."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"solution_history",children:(0,i.jsx)(n.code,{children:"solution_history"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"@property\ndef solution_history(self) -> List\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the history of evaluated solutions."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"best_solution",children:(0,i.jsx)(n.code,{children:"best_solution"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"@property\ndef best_solution(self) -> Optional[Any]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the best solution found so far, or ",(0,i.jsx)(n.code,{children:"None"})," if unavailable."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"best_cost",children:(0,i.jsx)(n.code,{children:"best_cost"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"@property\ndef best_cost(self) -> Optional[float]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the cost of the best solution found so far, or ",(0,i.jsx)(n.code,{children:"None"})," if unavailable."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"Functions",children:"Functions"}),"\n",(0,i.jsx)(n.h3,{id:"Function-_record_best",children:"Function _record_best(...)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _record_best(self, cost: float, best_solution: Any) -> None\n"})}),"\n",(0,i.jsx)(n.p,{children:"Record a new cost value and update the best solution if improved."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"cost"})}),": ",(0,i.jsx)(n.code,{children:"float"})," - Cost value to be added to the history."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"Function-get_report",children:"Function get_report()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def get_report(self) -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generate a formatted summary report of the optimization process. The report includes the best solution,\nits associated cost, and the evolution of cost values per iteration."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"report"}),": ",(0,i.jsx)(n.code,{children:"str"})," - A formatted string containing the optimization summary."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"Function-register",children:"Function register(...)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def register(self, alias: str, function: Callable[..., Any]) -> None\n"})}),"\n",(0,i.jsx)(n.p,{children:"Register a function dynamically in the optimizer instance."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"alias"})}),": ",(0,i.jsx)(n.code,{children:"str"})," - Name used to access the function as an attribute."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"function"})}),": ",(0,i.jsx)(n.code,{children:"Callable[..., Any]"})," - Callable to be registered."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TypeError"}),": If ",(0,i.jsx)(n.code,{children:"function"})," is not callable."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AttributeError"}),": If ",(0,i.jsx)(n.code,{children:"alias"})," is protected and cannot be modified, or if ",(0,i.jsx)(n.code,{children:"alias"})," does not exist in the\noptimizer class."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"Function-reset",children:"Function reset()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def reset(self)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Reset the object's internal state, clearing history and resetting values."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"Abstract-methods",children:"Abstract methods"}),"\n",(0,i.jsx)(n.h4,{id:"Function-optimize",children:"Function optimize(...)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def optimize(self, max_iters: int = 50, n_iter_no_change=10, verbose: bool = True) -> Any\n"})}),"\n",(0,i.jsx)(n.p,{children:"Execute the optimization process. This method must be implemented by the subclass to define how the optimization strategy explores the search space."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"max_iters"})}),": ",(0,i.jsx)(n.code,{children:"int"})," - Maximum number of iterations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"n_iter_no_change"})}),": ",(0,i.jsx)(n.code,{children:"int"}),", default=10 - The maximum number of iterations without updating the best solution."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"verbose"})}),": ",(0,i.jsx)(n.code,{children:"bool"}),", default=True - Flag to enable or disable detailed output during optimization."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/aisp-techniques/clonal-selection-algorithms/clonalg#Function-optimize",children:"Clonalg"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"Function-affinity_function",children:"Function affinity_function(...)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def affinity_function(self, solution: Any) -> float\n"})}),"\n",(0,i.jsx)(n.p,{children:"Evaluate the affinity of a candidate solution. This method must be implemented by the subclass to define the problem-specific."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"solution"})}),": ",(0,i.jsx)(n.code,{children:"Any"})," - Candidate solution to be evaluated."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"cost"}),": ",(0,i.jsx)(n.code,{children:"float"})," - Cost value associated with the given solution."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);