"use strict";(self.webpackChunkais_project_github_io=self.webpackChunkais_project_github_io||[]).push([[433],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2052:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const s={sidebar_position:2,title:"Using the RNSA",sidebar_label:"Using the RNSA",lastUpdatedAt:"2023/06/01",author:"Jo\xe3o Paulo",showLastUpdateAuthor:!0,showLastUpdateTime:!0,last_update:{date:"2023/06/01",author:"Jo\xe3o Paulo"}},i="Using the RNSA",o={unversionedId:"Getting Started/basic use/RNSA",id:"Getting Started/basic use/RNSA",title:"Using the RNSA",description:"Access the Jupyter notebook with the code available here!",source:"@site/docs/Getting Started/basic use/RNSA.md",sourceDirName:"Getting Started/basic use",slug:"/Getting Started/basic use/RNSA",permalink:"/docs/Getting Started/basic use/RNSA",draft:!1,tags:[],version:"current",lastUpdatedBy:"Jo\xe3o Paulo",lastUpdatedAt:1685577600,formattedLastUpdatedAt:"Jun 1, 2023",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Using the RNSA",sidebar_label:"Using the RNSA",lastUpdatedAt:"2023/06/01",author:"Jo\xe3o Paulo",showLastUpdateAuthor:!0,showLastUpdateTime:!0,last_update:{date:"2023/06/01",author:"Jo\xe3o Paulo"}},sidebar:"tutorialSidebar",previous:{title:"Using the BNSA",permalink:"/docs/Getting Started/basic use/BNSA"},next:{title:"Implemented techniques",permalink:"/docs/aisp-techniques/"}},l={},c=[{value:"Importing the Real-Valued Negative Selection Algorithm.",id:"importing-the-real-valued-negative-selection-algorithm",level:3},{value:"Generating dice bubbles for classes randomly.",id:"generating-dice-bubbles-for-classes-randomly",level:3},{value:"Testing the model <code>default-NSA</code>:",id:"testing-the-model-default-nsa",level:3},{value:"Detector and sample plotting:",id:"detector-and-sample-plotting",level:3},{value:"Testing the model <code>V-detector</code>:",id:"testing-the-model-v-detector",level:3},{value:"Detector and sample plotting:",id:"detector-and-sample-plotting-1",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...s}=e;return(0,r.kt)(d,(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-the-rnsa"},"Using the RNSA"),(0,r.kt)("p",null,"Access the Jupyter notebook with the code available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AIS-Package/aisp/blob/main/examples/RNSA/example_with_randomly_generated_dataset-en.ipynb"},"here"),"!"),(0,r.kt)("h3",{id:"importing-the-real-valued-negative-selection-algorithm"},"Importing the Real-Valued Negative Selection Algorithm."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from aisp.NSA import RNSA\n")),(0,r.kt)("h3",{id:"generating-dice-bubbles-for-classes-randomly"},"Generating dice bubbles for classes randomly."),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"make_blobs")," function, two sets of data are generated in the form of bubbles, in the range between 0 and 1, representing each class x and y. Then this data is separated into test and training sets."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.datasets import make_blobs\nfrom sklearn.model_selection import train_test_split\n\n# Generating the samples and outputs for the training.\nsamples, output = make_blobs(n_samples=500 , n_features=2, cluster_std=0.07, center_box=([0.0, 1.0]), centers=[[0.25, 0.75], [0.75, 0.25]], random_state=1234) \n# Separating data for training and testing.\ntrain_x, test_x, train_y, test_y = train_test_split(samples, output, test_size=0.2)\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"testing-the-model-default-nsa"},"Testing the model ",(0,r.kt)("inlineCode",{parentName:"h3"},"default-NSA"),":"),(0,r.kt)("p",null,"Start the model with 500 detectors, each with a radius of 0.06. Then, it presents the result of the forecast accuracy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n\n# Starting the class.\nmodel = RNSA(N=500, r=0.05, seed=1234)\n# Carrying out the training:\nmodel.fit(X=train_x, y=train_y)\n# Previewing classes with test samples.\nprev_y = model.predict(test_x)\n# Showing the accuracy of predictions for actual data.\nprint(f"The accuracy is {accuracy_score(prev_y, test_y)}")\nprint(classification_report(test_y, prev_y))\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u2714 Non-self detectors for classes (0, 1) successfully generated:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 1000/1000 detectors\nThe accuracy is 1.0\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        55\n           1       1.00      1.00      1.00        45\n\n    accuracy                           1.00       100\n   macro avg       1.00      1.00      1.00       100\nweighted avg       1.00      1.00      1.00       100\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"detector-and-sample-plotting"},"Detector and sample plotting:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(820).Z,width:"1242",height:"572"})),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"testing-the-model-v-detector"},"Testing the model ",(0,r.kt)("inlineCode",{parentName:"h3"},"V-detector"),":"),(0,r.kt)("p",null,"Start the model with 50 detectors, where the minimum radius is 0.05 and the sample's own radius is 0.04. It then shows the forecast accuracy result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n\n# Starting the class.\nmodel = RNSA(N=20, r=0.02, algorithm='V-detector', r_s=0.04, seed=123)\n# Carrying out the training:\nmodel.fit(X=train_x, y=train_y)\n# Previewing classes with test samples.\nprev_y = model.predict(test_x)\n# Showing the accuracy of predictions for actual data.\nprint(f\"The accuracy is {accuracy_score(prev_y, test_y)}\")\nprint(classification_report(test_y, prev_y))\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u2714 Non-self detectors for classes (0, 1) successfully generated:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 40/40 detectors\nThe accuracy is 1.0\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        55\n           1       1.00      1.00      1.00        45\n\n    accuracy                           1.00       100\n   macro avg       1.00      1.00      1.00       100\nweighted avg       1.00      1.00      1.00       100\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"detector-and-sample-plotting-1"},"Detector and sample plotting:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(5636).Z,width:"1225",height:"593"})))}u.isMDXComponent=!0},820:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/exemple_en_d-44cd95d8dc6321aa646a678c0159130a.png"},5636:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/exemple_en_v-6aa6177affc6e1a660ba8e62cd87118b.png"}}]);