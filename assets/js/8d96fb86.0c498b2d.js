"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[5856],{3097:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/matrixBNSA-6e32db669b654e5421173d15becc76f4.png"},7002:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Getting Started/basic use/BNSA","title":"Using the BNSA","description":"The present example, available here, aims to demonstrate the application of the binary negative selection algorithm. This algorithm is used to classify samples with discrete characteristics.","source":"@site/versioned_docs/version-0.2.x/Getting Started/basic use/BNSA.md","sourceDirName":"Getting Started/basic use","slug":"/Getting Started/basic use/BNSA","permalink":"/docs/Getting Started/basic use/BNSA","draft":false,"unlisted":false,"tags":[],"version":"0.2.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1747440000000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Using the BNSA","sidebar_label":"Using the BNSA","lastUpdatedAt":"2025/05/17","author":"Jo\xe3o Paulo","showLastUpdateAuthor":true,"showLastUpdateTime":true,"last_update":{"date":"2025/05/17","author":"Jo\xe3o Paulo"},"keywords":["Binary","classifying","anomalies","not self","affinity threshold","Negative Selection Algorithm","Artificial Immune System (AIS)","Self and non-self","Immune","Computa\xe7\xe3o Natural"]},"sidebar":"docs","previous":{"title":"Instalation","permalink":"/docs/Getting Started/instalation"},"next":{"title":"Using the RNSA","permalink":"/docs/Getting Started/basic use/RNSA"}}');var s=a(4848),i=a(8453);const r={sidebar_position:1,title:"Using the BNSA",sidebar_label:"Using the BNSA",lastUpdatedAt:"2025/05/17",author:"Jo\xe3o Paulo",showLastUpdateAuthor:!0,showLastUpdateTime:!0,last_update:{date:"2025/05/17",author:"Jo\xe3o Paulo"},keywords:["Binary","classifying","anomalies","not self","affinity threshold","Negative Selection Algorithm","Artificial Immune System (AIS)","Self and non-self","Immune","Computa\xe7\xe3o Natural"]},l="Applying the BNSA",o={},c=[{value:"Importing the BNSA algorithm",id:"importing-the-bnsa-algorithm",level:2},{value:"Generating samples",id:"generating-samples",level:2},{value:"Training",id:"training",level:2},{value:"Evaluation",id:"evaluation",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"applying-the-bnsa",children:"Applying the BNSA"})}),"\n",(0,s.jsx)(t.p,{children:"The present example, available here, aims to demonstrate the application of the binary negative selection algorithm. This algorithm is used to classify samples with discrete characteristics."}),"\n",(0,s.jsxs)(t.p,{children:["Access the Jupyter notebook with the code available ",(0,s.jsx)(t.a,{href:"https://github.com/AIS-Package/aisp/blob/main/examples/en/classification/BNSA/example_with_randomly_generated_dataset-en.ipynb",children:"here"}),"!"]}),"\n",(0,s.jsx)(t.h2,{id:"importing-the-bnsa-algorithm",children:"Importing the BNSA algorithm"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from aisp.nsa import BNSA\n"})}),"\n",(0,s.jsx)(t.h2,{id:"generating-samples",children:"Generating samples"}),"\n",(0,s.jsx)(t.p,{children:"Algorithm training and testing needs data samples. Thus, for the demonstration, two random classes were generated, using the following function:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef generate_samples(n_samples: int, n_features: int, s: float, x: None):\n   class_samples = []\n   while len(class_samples) < n_samples:\n     similarity = 0\n     sample_rand = np.random.randint(0, 2, size=(n_features))\n     if(len(class_samples) > max(int(n_samples * 0.1), 1)):\n       similarity = cdist(class_samples, np.expand_dims(sample_rand, axis=0), metric='hamming')[0, :]\n       if x is not None:\n         if similarity[0] <= s and not np.any(np.all(sample_rand == x, axis=1)):\n           class_samples.append(sample_rand)\n       elif similarity[0] <= s:\n         class_samples.append(sample_rand)\n     else:\n       class_samples.append(sample_rand)\n   return np.array(class_samples)\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.p,{children:"Each class will have 500 samples, with the minimum similarity between samples being 80% (s = 0.2). These classes will be separated into training (800 samples) and testing (200 samples) sets."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from sklearn.model_selection import train_test_split\n# Setting the seed to 121 to ensure the reproducibility of the generated data.\nnp.random.seed(121)\n# Generating samples for class "x".\nx = generate_samples(500, 20, 0.2, None)\n# Generating unique samples for class "y", different from samples present in class "x".\ny = generate_samples(500, 20, 0.2, x)\n# Adding columns containing the outputs (labels) of classes "x" and "y".\nx = np.hstack((x, np.full((x.shape[0], 1), \'x\')))\ny = np.hstack((y, np.full((y.shape[0], 1), \'y\')))\n# Merging the two vectors (classes "x" and "y") and randomizing the order of the samples.\nindex = np.random.permutation(x.shape[0]*2)\ndataset = np.vstack((x, y))[index]\n# Separating the characteristics (inputs) and the output classes (labels).\nsamples = dataset[:, :-1].astype(int)\noutput = dataset[:, -1]\n# Data separation for training and testing.\ntrain_x, test_x, train_y, test_y = train_test_split(samples, output, test_size=0.2, random_state=1234321)\n\n'})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"training",children:"Training"}),"\n",(0,s.jsx)(t.p,{children:"The model is tuned through training patterns. In this application, negative selection will distribute, with a differentiation rate of 30%, 250 detectors across the input space."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n# Starting the model.\nnsa = BNSA(N=250, aff_thresh=0.30, seed=1234321, max_discards=10000)\n# Conducting the training:\nnsa.fit(X=train_x, y=train_y)\n# Visualization of classes with test samples.\nprev_y = nsa.predict(test_x)\n# Showing the accuracy of predictions for real data.\nprint(f"The accuracy is {accuracy_score(prev_y, test_y)}")\nprint(classification_report(test_y, prev_y))\n'})}),"\n",(0,s.jsx)(t.p,{children:"Output:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\u2714 Non-self detectors for classes (x, y) successfully generated:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 500/500 detectors\nThe accuracy is 0.93\n              precision    recall  f1-score   support\n\n           x       0.93      0.91      0.92        90\n           y       0.93      0.95      0.94       110\n\n    accuracy                           0.93       200\n   macro avg       0.93      0.93      0.93       200\nweighted avg       0.93      0.93      0.93       200\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"evaluation",children:"Evaluation"}),"\n",(0,s.jsx)(t.p,{children:"The model obtained an accuracy of 0.93 for the test set. The precision in each class, for both x and y, was also 0.93. This can be seen in the confusion matrix in Figure 1."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# Generating the confusion matrix and plotting it graphically.\nmat = confusion_matrix(y_true=test_y, y_pred=prev_y)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, xticklabels=nsa.classes, yticklabels=nsa.classes)\nplt.xlabel('Real')\nplt.ylabel('Estimated')\nplt.show()\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:a(3097).A+"",width:"447",height:"447"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>l});var n=a(6540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);