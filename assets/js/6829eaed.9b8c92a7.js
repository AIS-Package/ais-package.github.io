"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[5379],{3973:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"advanced-guides/Base Classes Reference/csa/airs","title":"Artificial Immune Recognition System Base","description":"Base class for algorithm AIRS.","source":"@site/versioned_docs/version-0.2.x/advanced-guides/Base Classes Reference/csa/airs.md","sourceDirName":"advanced-guides/Base Classes Reference/csa","slug":"/advanced-guides/Base Classes Reference/csa/airs","permalink":"/docs/advanced-guides/Base Classes Reference/csa/airs","draft":false,"unlisted":false,"tags":[],"version":"0.2.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1750019576000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Artificial Immune Recognition System Base","sidebar_label":"Artificial Immune Recognition System","lastUpdatedAt":"2025/05/25","author":"Jo\xe3o Paulo"},"sidebar":"docs","previous":{"title":"Clonal Selection Algorithms","permalink":"/docs/category/clonal-selection-algorithms"},"next":{"title":"Negative Selection","permalink":"/docs/advanced-guides/Core/Negative Selection"}}');var r=s(4848),t=s(8453);const a={sidebar_position:1,title:"Artificial Immune Recognition System Base",sidebar_label:"Artificial Immune Recognition System",lastUpdatedAt:"2025/05/25",author:"Jo\xe3o Paulo"},c="BaseAIRS(BaseClassifier, ABC)",o={},d=[{value:"def _check_and_raise_exceptions_fit(...):",id:"def-_check_and_raise_exceptions_fit",level:3},{value:"def _check_and_raise_exceptions_fit(...):",id:"def-_check_and_raise_exceptions_fit-1",level:3}];function l(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"baseairsbaseclassifier-abc",children:"BaseAIRS(BaseClassifier, ABC)"})}),"\n",(0,r.jsxs)(n.p,{children:["Base class for algorithm ",(0,r.jsx)(n.strong,{children:"AIRS"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The base class contains functions that are used by more than one class in the package, and\ntherefore are considered essential for the overall functioning of the system."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"def-_check_and_raise_exceptions_fit",children:"def _check_and_raise_exceptions_fit(...):"}),"\n",(0,r.jsx)(n.p,{children:"Verify the fit parameters and throw exceptions if the verification is not successful."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@staticmethod\ndef _check_and_raise_exceptions_fit(\n    X: npt.NDArray = None,\n    y: npt.NDArray = None,\n    algorithm: Literal[\n        "continuous-features", "binary-features"\n    ] = "continuous-features"\n):\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"X"})})," (",(0,r.jsx)(n.code,{children:"npt.NDArray"}),"): Training array, containing the samples and their characteristics, [",(0,r.jsx)(n.code,{children:"N samples"})," (rows)][",(0,r.jsx)(n.code,{children:"N features"})," (columns)]."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"y"})})," (",(0,r.jsx)(n.code,{children:"npt.NDArray"}),"): Array of target classes of ",(0,r.jsx)(n.code,{children:"X"})," with [",(0,r.jsx)(n.code,{children:"N samples"})," (lines)]."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"algorithm"})})," (",(0,r.jsx)(n.code,{children:'Literal["continuous-features", "binary-features"], optional'}),"): Specifies the type of algorithm to use, depending\non whether the input data has continuous or binary features."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Raises"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TypeError"}),":\nIf X or y are not ndarrays or have incompatible shapes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValueError"}),"\nIf ",(0,r.jsx)(n.em,{children:"class"})," is BNSA and X contains values that are not composed only of 0 and 1."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"def-_check_and_raise_exceptions_fit-1",children:"def _check_and_raise_exceptions_fit(...):"}),"\n",(0,r.jsx)(n.p,{children:"Verify the fit parameters and throw exceptions if the verification is not successful."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@staticmethod\ndef _check_and_raise_exceptions_predict(\n    X: npt.NDArray = None,\n    expected: int = 0,\n    algorithm: Literal[\n        "continuous-features", "binary-features"\n    ] = "continuous-features"\n) -> None:\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"X"})})," (",(0,r.jsx)(n.code,{children:"npt.NDArray"}),"): Training array, containing the samples and their characteristics, [",(0,r.jsx)(n.code,{children:"N samples"})," rows)][",(0,r.jsx)(n.code,{children:"N features"})," (columns)]."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"expected"})})," (",(0,r.jsx)(n.code,{children:"int"}),"):  Expected number of features per sample (columns in X)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"algorithm"})})," (",(0,r.jsx)(n.code,{children:'Literal["continuous-features", "binary-features"], optional'}),"): Specifies the type of algorithm to use, depending\non whether the input data has continuous or binary features."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Raises"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TypeError"}),"\nIf X is not a ndarray or list."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FeatureDimensionMismatch"}),"\nIf the number of features in X does not match the expected number."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValueError"}),"\nIf algorithm is binary-features and X contains values that are not composed only of 0 and 1."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);