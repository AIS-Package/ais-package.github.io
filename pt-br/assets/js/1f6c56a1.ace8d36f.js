"use strict";(self.webpackChunkais_package_github_io=self.webpackChunkais_package_github_io||[]).push([[492],{4650:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"advanced-guides/base-module/Mutation","title":"Mutation","description":"Cont\xe9m fun\xe7\xf5es que geram conjuntos de clones mutados a partir de vetores cont\xednuos ou bin\xe1rios, simulando o processo de expans\xe3o clonal em sistemas imunol\xf3gicos artificiais.","source":"@site/i18n/pt-br/docusaurus-plugin-content-docs/version-0.3.x/advanced-guides/base-module/Mutation.md","sourceDirName":"advanced-guides/base-module","slug":"/advanced-guides/base-module/Mutation","permalink":"/pt-br/docs/0.3.x/advanced-guides/base-module/Mutation","draft":false,"unlisted":false,"tags":[],"version":"0.3.x","lastUpdatedBy":"Jo\xe3o Paulo","lastUpdatedAt":1759068822000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Mutation","sidebar_label":"Mutation","lastUpdatedAt":"2025/04/04","author":"Jo\xe3o Paulo","keywords":["Muta\xe7\xe3o","Expans\xe3o Clonal","Sistema Imunol\xf3gico","clone_and_mutate","clone_and_mutate_continuous","clone_and_mutate_binary","clone_and_mutate_ranged","Sistemas Imunol\xf3gicos Artificiais","Fun\xe7\xf5es Python Numba","Muta\xe7\xe3o Vetorial"]},"sidebar":"docs","previous":{"title":"BaseClusterer","permalink":"/pt-br/docs/0.3.x/advanced-guides/base-module/Clusterer"},"next":{"title":"Sele\xe7\xe3o Negativa","permalink":"/pt-br/docs/0.3.x/advanced-guides/base-classes-reference/nsa"}}');var t=o(4848),s=o(8453);const r={sidebar_position:4,title:"Mutation",sidebar_label:"Mutation",lastUpdatedAt:"2025/04/04",author:"Jo\xe3o Paulo",keywords:["Muta\xe7\xe3o","Expans\xe3o Clonal","Sistema Imunol\xf3gico","clone_and_mutate","clone_and_mutate_continuous","clone_and_mutate_binary","clone_and_mutate_ranged","Sistemas Imunol\xf3gicos Artificiais","Fun\xe7\xf5es Python Numba","Muta\xe7\xe3o Vetorial"]},i="Mutation",d={},l=[{value:"clone_and_mutate_continuous",id:"clone_and_mutate_continuous",level:2},{value:"Par\xe2metros",id:"Par\xe2metros",level:3},{value:"Retorno",id:"Retorno",level:3},{value:"clone_and_mutate_binary",id:"clone_and_mutate_binary",level:2},{value:"Par\xe2metros",id:"Par\xe2metros-1",level:3},{value:"Retorno",id:"Retorno-1",level:3},{value:"clone_and_mutate_ranged",id:"clone_and_mutate_ranged",level:2},{value:"Par\xe2metros",id:"Par\xe2metros-2",level:3},{value:"Retorna",id:"Retorna",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"Mutation",children:"Mutation"})}),"\n",(0,t.jsx)(n.p,{children:"Cont\xe9m fun\xe7\xf5es que geram conjuntos de clones mutados a partir de vetores cont\xednuos ou bin\xe1rios, simulando o processo de expans\xe3o clonal em sistemas imunol\xf3gicos artificiais."}),"\n",(0,t.jsx)(n.h2,{id:"clone_and_mutate_continuous",children:"clone_and_mutate_continuous"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@njit([(types.float64[:], types.int64)], cache=True)\ndef clone_and_mutate_continuous(\n    vector: npt.NDArray[np.float64],\n    n: int\n) -> npt.NDArray[np.float64]:\n"})}),"\n",(0,t.jsx)(n.p,{children:"Gera um conjunto de clones mutados a partir de um vetor cont\xednuo."}),"\n",(0,t.jsxs)(n.p,{children:["Esta fun\xe7\xe3o cria ",(0,t.jsx)(n.code,{children:"n"})," clones do vetor de entrada e aplica muta\xe7\xf5es aleat\xf3rias em cada um, simulando o processo de expans\xe3o clonal em sistemas imunes artificiais. Cada clone recebe um n\xfamero aleat\xf3rio de muta\xe7\xf5es em posi\xe7\xf5es distintas do vetor original."]}),"\n",(0,t.jsx)(n.h3,{id:"Par\xe2metros",children:"Par\xe2metros"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vector"})," (",(0,t.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Vetor cont\xednuo original que representa a c\xe9lula imune a ser clonada e mutada."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"n"})," (",(0,t.jsx)(n.code,{children:"int"}),"): Quantidade de clones mutados a serem gerados."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"Retorno",children:"Retorno"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"clone_set"})," (",(0,t.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Array com forma ",(0,t.jsx)(n.code,{children:"(n, len(vector))"})," contendo os ",(0,t.jsx)(n.code,{children:"n"})," clones mutados do vetor original."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"clone_and_mutate_binary",children:"clone_and_mutate_binary"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@njit([(types.boolean[:], types.int64)], cache=True)\ndef clone_and_mutate_binary(\n    vector: npt.NDArray[np.bool_],\n    n: int\n) -> npt.NDArray[np.bool_]:\n"})}),"\n",(0,t.jsx)(n.p,{children:"Gera um conjunto de clones mutados a partir de um vetor bin\xe1rio."}),"\n",(0,t.jsxs)(n.p,{children:["Esta fun\xe7\xe3o cria ",(0,t.jsx)(n.code,{children:"n"})," clones do vetor bin\xe1rio de entrada e aplica muta\xe7\xf5es aleat\xf3rias em alguns bits, simulando a expans\xe3o clonal em sistemas imunes artificiais com representa\xe7\xf5es discretas."]}),"\n",(0,t.jsx)(n.h3,{id:"Par\xe2metros-1",children:"Par\xe2metros"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vector"})," (",(0,t.jsx)(n.code,{children:"npt.NDArray[np.bool_]"}),"): Vetor bin\xe1rio original que representa a c\xe9lula imune a ser clonada e mutada."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"n"})," (",(0,t.jsx)(n.code,{children:"int"}),"): Quantidade de clones mutados a serem gerados."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"Retorno-1",children:"Retorno"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"clone_set"})," (",(0,t.jsx)(n.code,{children:"npt.NDArray[np.bool_]"}),"): Array com forma ",(0,t.jsx)(n.code,{children:"(n, len(vector))"})," contendo os ",(0,t.jsx)(n.code,{children:"n"})," clones mutados do vetor original."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"clone_and_mutate_ranged",children:"clone_and_mutate_ranged"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@njit([(types.float64[:], types.int64, types.float64[:, :])], cache=True)\ndef clone_and_mutate_ranged(\nvector: npt.NDArray[np.float64],\nn: int,\nbounds: npt.NDArray[np.float64]\n) -> npt.NDArray[np.float64]:\n"})}),"\n",(0,t.jsx)(n.p,{children:"Gera um conjunto de clones mutados a partir de um vetor cont\xednuo usando limites personalizados por dimens\xe3o."}),"\n",(0,t.jsxs)(n.p,{children:["Esta fun\xe7\xe3o cria ",(0,t.jsx)(n.code,{children:"n"})," clones do vetor de entrada e aplica muta\xe7\xf5es aleat\xf3rias em cada um, simulando o processo de expans\xe3o clonal em sistemas imunes artificiais. Cada clone recebe um n\xfamero aleat\xf3rio de muta\xe7\xf5es em posi\xe7\xf5es distintas do vetor original."]}),"\n",(0,t.jsx)(n.h3,{id:"Par\xe2metros-2",children:"Par\xe2metros"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vector"})," (",(0,t.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Vetor cont\xednuo original que representa a c\xe9lula imune a ser clonada e mutada."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"n"})," (",(0,t.jsx)(n.code,{children:"int"}),"): Quantidade de clones mutados a serem gerados."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bounds"})," (",(0,t.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Um array 2D com o formato ",(0,t.jsx)(n.code,{children:"(len(vector), 2)"})," contendo os valores m\xednimo e m\xe1ximo para cada dimens\xe3o."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"Retorna",children:"Retorna"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"clone_set"})," (",(0,t.jsx)(n.code,{children:"npt.NDArray[np.float64]"}),"): Array com forma ",(0,t.jsx)(n.code,{children:"(n, len(vector))"})," contendo os ",(0,t.jsx)(n.code,{children:"n"})," clones mutados do vetor original."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>i});var a=o(6540);const t={},s=a.createContext(t);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);