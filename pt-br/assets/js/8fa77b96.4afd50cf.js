"use strict";(self.webpackChunkais_project_github_io=self.webpackChunkais_project_github_io||[]).push([[679],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>g});var s=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,s,r=function(e,a){if(null==e)return{};var t,s,r={},n=Object.keys(e);for(s=0;s<n.length;s++)t=n[s],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)t=n[s],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=s.createContext({}),l=function(e){var a=s.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=l(e.components);return s.createElement(d.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},u=s.forwardRef((function(e,a){var t=e.components,r=e.mdxType,n=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(t),u=r,g=c["".concat(d,".").concat(u)]||c[u]||m[u]||n;return t?s.createElement(g,o(o({ref:a},p),{},{components:t})):s.createElement(g,o({ref:a},p))}));function g(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var n=t.length,o=new Array(n);o[0]=u;var i={};for(var d in a)hasOwnProperty.call(a,d)&&(i[d]=a[d]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<n;l++)o[l]=t[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8881:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>n,metadata:()=>i,toc:()=>l});var s=t(7462),r=(t(7294),t(3905));const n={sidebar_position:2,title:"Basic usage",sidebar_label:"Basic usage",lastUpdatedAt:"2023/06/01",author:"Jo\xe3o Paulo",showLastUpdateAuthor:!0,showLastUpdateTime:!0},o="BNSA (Algoritmo de sele\xe7\xe3o negativa bin\xe1ria)",i={unversionedId:"Getting Started/basic use",id:"Getting Started/basic use",title:"Basic usage",description:"Importando o bin\xe1rio de sele\xe7\xe3o negativa.",source:"@site/i18n/pt-br/docusaurus-plugin-content-docs/current/Getting Started/basic use.md",sourceDirName:"Getting Started",slug:"/Getting Started/basic use",permalink:"/pt-br/docs/Getting Started/basic use",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Basic usage",sidebar_label:"Basic usage",lastUpdatedAt:"2023/06/01",author:"Jo\xe3o Paulo",showLastUpdateAuthor:!0,showLastUpdateTime:!0},sidebar:"tutorialSidebar",previous:{title:"Instalation",permalink:"/pt-br/docs/Getting Started/instalation"},next:{title:"T\xe9cnicas implementadas",permalink:"/pt-br/docs/aisp-techniques/"}},d={},l=[{value:"Importando o bin\xe1rio de sele\xe7\xe3o negativa.",id:"importando-o-bin\xe1rio-de-sele\xe7\xe3o-negativa",level:3},{value:"Gerando anostras bin\xe1rias aleatoriamente e separando os dados.",id:"gerando-anostras-bin\xe1rias-aleatoriamente-e-separando-os-dados",level:3},{value:"Fun\xe7\xe3o para gerar amostras bin\xe1rias",id:"fun\xe7\xe3o-para-gerar-amostras-bin\xe1rias",level:4},{value:"Gera\xe7\xe3o e separa\xe7\xe3o de dados",id:"gera\xe7\xe3o-e-separa\xe7\xe3o-de-dados",level:4},{value:"Testando o modelo:",id:"testando-o-modelo",level:3},{value:"RNSA (Algoritmo de sele\xe7\xe3o negativa de valor real)",id:"rnsa-algoritmo-de-sele\xe7\xe3o-negativa-de-valor-real",level:2},{value:"Importando a sele\xe7\xe3o negativa com valor real.",id:"importando-a-sele\xe7\xe3o-negativa-com-valor-real",level:3},{value:"Gerando bolhas de classe aleatoriamente e separando os dados.",id:"gerando-bolhas-de-classe-aleatoriamente-e-separando-os-dados",level:3},{value:"Testando o modelo <code>default-NSA</code>:",id:"testando-o-modelo-default-nsa",level:3},{value:"Plotagem dos detector e amostras:",id:"plotagem-dos-detector-e-amostras",level:3},{value:"Testando o modelo <code>V-detector</code>:",id:"testando-o-modelo-v-detector",level:3},{value:"Plotagem dos detector e amostras:",id:"plotagem-dos-detector-e-amostras-1",level:3}],p={toc:l},c="wrapper";function m(e){let{components:a,...n}=e;return(0,r.kt)(c,(0,s.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bnsa-algoritmo-de-sele\xe7\xe3o-negativa-bin\xe1ria"},"BNSA (Algoritmo de sele\xe7\xe3o negativa bin\xe1ria)"),(0,r.kt)("h3",{id:"importando-o-bin\xe1rio-de-sele\xe7\xe3o-negativa"},"Importando o bin\xe1rio de sele\xe7\xe3o negativa."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from aisp.NSA import BNSA\n")),(0,r.kt)("h3",{id:"gerando-anostras-bin\xe1rias-aleatoriamente-e-separando-os-dados"},"Gerando anostras bin\xe1rias aleatoriamente e separando os dados."),(0,r.kt)("h4",{id:"fun\xe7\xe3o-para-gerar-amostras-bin\xe1rias"},"Fun\xe7\xe3o para gerar amostras bin\xe1rias"),(0,r.kt)("p",null,"Nesta fun\xe7\xe3o, s\xe3o geradas amostras de dados bin\xe1rios com um grau de similaridade acima de um limiar definido s. No entanto, 10% dos primeiros dados s\xe3o gerados aleatoriamente, sem levar em considera\xe7\xe3o o valor de s. Al\xe9m disso, quando j\xe1 existem amostras, s\xe3o geradas amostras \xfanicas para a nova classe, garantindo que as amostras aleat\xf3rias geradas n\xe3o estejam duplicadas em classes diferentes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nfrom scipy.spatial.distance import cdist\n# Essa fun\xe7\xe3o gera amostras com similaridades acima de um limiar de semelhan\xe7a.\ndef generate_samples(n_samples: int, n_features: int, s: float, x: None):\n  classe_samples = []\n  while len(classe_samples) < n_samples:\n    similarity = 0\n    sample_rand = np.random.randint(0, 2, size=(n_features))\n    if(len(classe_samples) > max(int(n_samples * 0.1), 1)):\n      similarity = cdist(classe_samples, np.expand_dims(sample_rand, axis=0), metric='hamming')[0, :]\n      if x is not None:\n        if similarity[0] > s and not np.any(np.all(sample_rand == x, axis=1)):\n          classe_samples.append(sample_rand)\n      elif similarity[0] > s:\n        classe_samples.append(sample_rand)\n    else:\n      classe_samples.append(sample_rand)\n  return np.array(classe_samples)\n")),(0,r.kt)("h4",{id:"gera\xe7\xe3o-e-separa\xe7\xe3o-de-dados"},"Gera\xe7\xe3o e separa\xe7\xe3o de dados"),(0,r.kt)("p",null,"Nessa etapa, s\xe3o gerados 600 dados, sendo 300 para representar a classe 'x' e 300 para representar a classe 'y'. Cada dado \xe9 formado por 20 dimens\xf5es. \xc9 importante destacar que esses dados s\xe3o criados de forma que apresentem um grau de similaridade de 70%, ou seja, compartilham caracter\xedsticas comuns. Ap\xf3s a gera\xe7\xe3o, os dados s\xe3o separados em conjuntos de treinamento e teste."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\n# Configurando a seed para 121 para garantir a reprodutibilidade dos dados gerados.\nnp.random.seed(121)\n# Gerando amostras para a classe "x".\nx = generate_samples(300, 20, 0.7, None)\n# Gerando amostras exclusivas para a classe "y", diferentes das amostras presentes na classe "x".\ny = generate_samples(300, 20, 0.7, x)\n# Adicionando colunas contendo as sa\xeddas (r\xf3tulos) das classes "x" e "y".\nx = np.hstack((x, np.full((x.shape[0], 1), \'x\')))\ny = np.hstack((y, np.full((y.shape[0], 1), \'y\')))\n# Juntando os dois vetores (classes "x" e "y") e randomizando a ordem das amostras.\nindex = np.random.permutation(x.shape[0]*2)\ndataset = np.vstack((x, y))[index]\n# Separando as caracter\xedsticas (inputs) e as classes de sa\xedda (r\xf3tulos).\nsamples = dataset[:, :-1].astype(int)\noutput = dataset[:, -1]\n# Separa\xe7\xe3o de dados para treinamento e teste.\ntrain_x, test_x, train_y, test_y = train_test_split(samples, output, test_size=0.2)\n\n')),(0,r.kt)("h3",{id:"testando-o-modelo"},"Testando o modelo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Iniciando o modelo.\nnsa = BNSA(N=100, aff_thresh=0.3, seed=12321, max_discards=10000)\n# Realiza\xe7\xe3o do treinamento:\nnsa.fit(X=train_x, y=train_y)\n# Visualiza\xe7\xe3o de classes com amostras de teste.\nprev_y = nsa.predict(test_x)\n# Mostrando a precis\xe3o das previs\xf5es para dados reais.\nprint(f"The accuracy is {accuracy_score(prev_y, test_y)}")\nprint(classification_report(test_y, prev_y))\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u2714 Non-self detectors for classes (x, y) successfully generated:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 200/200 detectors\nA acur\xe1cia \xe9 0.9\n              precision    recall  f1-score   support\n\n           x       0.91      0.91      0.91        68\n           y       0.88      0.88      0.88        52\n\n    accuracy                           0.90       120\n   macro avg       0.90      0.90      0.90       120\nweighted avg       0.90      0.90      0.90       120\n")),(0,r.kt)("h2",{id:"rnsa-algoritmo-de-sele\xe7\xe3o-negativa-de-valor-real"},"RNSA (Algoritmo de sele\xe7\xe3o negativa de valor real)"),(0,r.kt)("h3",{id:"importando-a-sele\xe7\xe3o-negativa-com-valor-real"},"Importando a sele\xe7\xe3o negativa com valor real."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from aisp.NSA import RNSA\n")),(0,r.kt)("h3",{id:"gerando-bolhas-de-classe-aleatoriamente-e-separando-os-dados"},"Gerando bolhas de classe aleatoriamente e separando os dados."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.datasets import make_blobs\nfrom sklearn.model_selection import train_test_split\n\n# Gerando as amostras e sa\xeddas para o treinamento.\nsamples, output = make_blobs(n_samples=500 , n_features=2, cluster_std=0.07, center_box=([0.0, 1.0]), centers=[[0.25, 0.75], [0.75, 0.25]], random_state=1234) \n# Separando dados para treinamento e teste.\ntrain_x, test_x, train_y, test_y = train_test_split(samples, output, test_size=0.2)\n")),(0,r.kt)("h3",{id:"testando-o-modelo-default-nsa"},"Testando o modelo ",(0,r.kt)("inlineCode",{parentName:"h3"},"default-NSA"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n\n# Iniciando a classe.\nmodel = RNSA(N=500, r=0.06, seed=123)\n# Efetuando o treinamento: \nmodel.fit(X=train_x, y=train_y)\n# Efetuando a previs\xe3o:\nprev_y = model.predict(test_x)\n# Mostrando a acur\xe1cia das previs\xf5es para os dados reais.\nprint(f"The accuracy is {accuracy_score(prev_y, test_y)}")\nprint(classification_report(test_y, prev_y))\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u2714 Non-self detectors for classes (0, 1) successfully generated:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 1000/1000 detectors\nThe accuracy is 1.0\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        55\n           1       1.00      1.00      1.00        45\n\n    accuracy                           1.00       100\n   macro avg       1.00      1.00      1.00       100\nweighted avg       1.00      1.00      1.00       100\n")),(0,r.kt)("h3",{id:"plotagem-dos-detector-e-amostras"},"Plotagem dos detector e amostras:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(2616).Z,width:"1242",height:"572"})),(0,r.kt)("h3",{id:"testando-o-modelo-v-detector"},"Testando o modelo ",(0,r.kt)("inlineCode",{parentName:"h3"},"V-detector"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n\n# Iniciando a classe.\nmodel = RNSA(N=50, r=0.05, algorithm='V-detector', r_s=0.04, seed=1234)\n# Efetuando o treinamento: \nmodel.fit(X=train_x, y=train_y)\n# Efetuando a previs\xe3o:\nprev_y = model.predict(test_x)\n# Mostrando a acur\xe1cia das previs\xf5es para os dados reais.\nprint(f\"A acuracia \xe9 {accuracy_score(prev, test_y)}\")\nprint(classification_report(test_y, prev))\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u2714 Non-self detectors for classes (0, 1) successfully generated:  \u2507\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2507 100/100 detectors\nA acuracia \xe9 1.0\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        48\n           1       1.00      1.00      1.00        52\n\n    accuracy                           1.00       100\n   macro avg       1.00      1.00      1.00       100\nweighted avg       1.00      1.00      1.00       100\n")),(0,r.kt)("h3",{id:"plotagem-dos-detector-e-amostras-1"},"Plotagem dos detector e amostras:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(4213).Z,width:"1225",height:"593"})))}m.isMDXComponent=!0},2616:(e,a,t)=>{t.d(a,{Z:()=>s});const s=t.p+"assets/images/exemple_pt_d-44cd95d8dc6321aa646a678c0159130a.png"},4213:(e,a,t)=>{t.d(a,{Z:()=>s});const s=t.p+"assets/images/exemple_pt_v-6aa6177affc6e1a660ba8e62cd87118b.png"}}]);